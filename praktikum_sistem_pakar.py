# -*- coding: utf-8 -*-
"""Praktikum_Sistem_Pakar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wt7KqQTktHSaqgd-IFZF1SuJXyXyYSY2
"""

!pip install experta

!pip install --upgrade frozendict

"""Experta Diagnosis Penyakit"""

from experta import *

class Diagnosis(KnowledgeEngine):

  @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True))
  def flu(self):
    print("Diagnosis: You may have the Flu.")

  @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breathing_difficulty=True))
  def pneumonia(self):
    print("Diagnosis: You may have Pneumonia.")

  @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(cough=False))
  def cold(self):
    print("Diagnosis: You may have a Common Cold.")

  @Rule(Fact(sore_throat=True) & Fact(fever=True))
  def throat_infection(self):
    print("Diagnosis: You may have a Throat Infection.")

  @Rule(Fact(cough=False) & Fact(fever=False) & Fact(fatigue=False))
  def healthy(self):
    print("Diagnosis: You may seem to be Healthy.")

  # Tambahan penyakit baru:

  @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(itchy_eyes=True))
  def allergy(self):
    print("Diagnosis: You may have an Allergy.")

  @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True) & Fact(loss_of_taste_smell=True))
  def covid19(self):
    print("Diagnosis: You may have COVID-19.")

  @Rule(Fact(breathing_difficulty=True) & Fact(cough=True) & Fact(fever=False) & Fact(chest_tightness=True))
  def asthma(self):
    print("Diagnosis: You may have Asthma.")

  @Rule(Fact(headache=True) & Fact(runny_nose=True) & Fact(facial_pain=True))
  def sinusitis(self):
    print("Diagnosis: You may have Sinusitis.")


def get_input():
  """Helper function to get user input as boolean (yes/no)."""
  def ask_question(question):
    return input(question + " (yes/no): ").strip().lower() == "yes"

  return {
      "cough": ask_question("Do you have a cough?"),
      "fever": ask_question("Do you have a fever?"),
      "fatigue": ask_question("Do you feel fatigued?"),
      "breathing_difficulty": ask_question("Do you have breathing difficulties?"),
      "sneezing": ask_question("Are you sneezing?"),
      "runny_nose": ask_question("Do you have a runny nose?"),
      "sore_throat": ask_question("Do you have a sore throat?"),
      "itchy_eyes": ask_question("Do you have itchy eyes?"),
      "loss_of_taste_smell": ask_question("Have you lost your sense of taste or smell?"),
      "chest_tightness": ask_question("Do you feel tightness in your chest?"),
      "headache": ask_question("Do you have a headache?"),
      "facial_pain": ask_question("Do you feel pain in your facial area?")
  }

# Run the Expert System
if __name__ == "__main__":
  symptoms = get_input()
  engine = Diagnosis()
  engine.reset()

  for symptom, present in symptoms.items():
    engine.declare(Fact(**{symptom: present}))

  engine.run()

"""Forward Chaining"""

from experta import *

class SistemPakarMedis(KnowledgeEngine):
  @Rule(Fact(demam=True) & Fact(batuk=True))
  def flu(self):
    print("Diagnosis: Flu.")

  @Rule(Fact(sakit_tenggorokan=True) & Fact(demam=True))
  def throat_infection(self):
    print("Diagnosis: Radang Tenggorokan.")

# Running the Expert System
engine = SistemPakarMedis()
engine.reset()
engine.declare(Fact(demam=True))
engine.declare(Fact(sakit_tenggorokan=True)) # Input symptoms
engine.run()

"""Diagnosis: Radang Tenggorokan"""

def forward_chaining(facts, rules):
  inferred = set(facts)
  changed = True

  while changed:
    changed = False
    for rule in rules:
      if rule["if"]. issubset(inferred) and rule["then"] not in inferred:
        inferred. add(rule["then"])
        changed = True
  return inferred

facts = {"has_feathers", "has_beak", "lays_eggs"}
rules = [
    {"if": {"has_feathers", "can_fly"}, "then": "is_bird"},
    {"if": {"lays_eggs", "is_bird"}, "then": "is_chicken"},
    {"if": {"cannot_fly", "is_bird"}, "then": "is_penguin"},
    {"if": {"carnivore", "is_bird"}, "then": "is_eagle"}
]

result = forward_chaining(facts, rules)
print("Inferred facts: ", result)

"""Backward Chaining"""

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"likes_computers", "solves_problems", "likes_to_design"}
rules = [
    {"if": {"likes_computers", "solves_problems"}, "then": "should_be_engineer"},
    {"if": {"should_be_engineer", "likes_programming"}, "then": "software_engineer"},
    {"if": {"should_be_engineer", "likes_to_design"}, "then": "UI/UX_engineer"}
]

goal = "UI/UX_engineer"
result = backward_chaining(goal, facts, rules)
print(f"Is '{goal}' provable? -> ", result)

"""Tugas Praktikum

SOAL 1 forward_chaining dan print hasil inferensi nya
"""

def forward_chaining(facts, rules):
  inferred = set(facts)
  changed = True

  while changed:
    changed = False
    for rule in rules:
      if rule["if"].issubset(inferred) and rule["then"] not in inferred:
        inferred.add(rule["then"])
        changed = True
  return inferred

facts = {"has_wheels", "has_engine", "has_four_wheels"}
rules = [
    {"if": {"has_wheels", "has_engine"}, "then": "is_vehicle"},
    {"if": {"is_vehicle", "has_two_wheels"}, "then": "is_motorcyle"},
    {"if": {"is_vehicle", "has_four_wheels"}, "then": "is_car"}
]

result = forward_chaining(facts, rules)
print("Inferred facts: ", result)

"""SOAL 2 Backward Chaining
buatlah 3 variable goal, facts, rules
Goal: is_penguin Rules:
"""

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"has_feathers", "has_small_wings"}
rules = [
    {"if": {"is_bird", "cannot_fly"}, "then": "is_penguin"},
    {"if": {"has_feathers"}, "then": "is_bird"},
    {"if": {"has_small_wings"}, "then": "cannot_fly"}
]

goal = "is_penguin"
result = backward_chaining(goal, facts, rules)
print(f"Is '{goal}' provable? -> ", result)